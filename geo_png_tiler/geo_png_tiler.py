# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoPngTiler
                                 A QGIS plugin
 Export tile rasters in GeoPNG format
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-19
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Sasaki
        email                : kgoulding@sasaki.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import math
import json

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QSize

from qgis.PyQt.QtGui import QIcon, QColor

from qgis.PyQt.QtWidgets import QAction

from qgis.utils import iface

# noinspection PyUnresolvedReferences
from qgis.gui import (
    QgsRubberBand,
)

# noinspection PyUnresolvedReferences
from qgis.core import (
    QgsRectangle,
    QgsMapLayerModel,
    QgsMapLayerProxyModel,
    QgsProject,
    QgsMapSettings,
    QgsMapRendererJob,
    QgsMapRendererSequentialJob,
    QgsColorRampShader,
    QgsRasterShader,
    QgsRasterShaderFunction,
    QgsCoordinateReferenceSystem,
    QgsSingleBandPseudoColorRenderer,
    QgsPointXY,
    QgsCoordinateTransform,
    QgsGeometry,
    QgsPoint,
)

# Initialize Qt resources from file resources.py
# Import the code for the dialog
from .geo_png_tiler_dialog import GeoPngTilerDialog
from .tilebelt import tile, tile_plus, ul
import os.path


# NOTE enable these 2 lines if you want to use PyCharm debugging (comment these out when first loading QGIS)
# In order to use debugging, PyCharm must be run from this bat file: "geo_png_tiler\start-pycharm-qgis-python3.bat"
# disabling because QGIS keeps crashing...
# import pydevd_pycharm
# pydevd_pycharm.settrace('localhost', port=53100, stdoutToServer=True, stderrToServer=True)

# it looks like you can't extend C++ classes in Python unless its built into the C++ code (which QGIS doesn't do):
# https://root.cern.ch/notebooks/HowTos/inherit-C++-classes-from-python.html
# but you also can't pass a pure Python class because of type safety
# TypeError: QgsRasterShader.setRasterShaderFunction(): argument 1 has unexpected type 'PngDbRasterShaderFunction2'

class PngDbRasterShaderFunction2:
    def __init__(self, min, max):
        self.min = min
        self.max = max
        print(f"PngDbRasterShaderFunction2 {min} {max}")

    def setMaximumValue(self, max):
        self.max = max

    def setMinimumValue(self, min):
        self.min = min

    def shade(self, value):
        print(f"calling shade {value}")
        if value < 10000:
            return True, 68, 0, 0, 255
        else:
            return True, 255, 255, 0, 255


class PngDbRasterShaderFunction(QgsRasterShaderFunction):
    def __init__(self, min, max):
        QgsRasterShaderFunction.__init__(self, min, max)
        print(f"PngDbRasterShaderFunction {min} {max}")

    def shade(self, value):
        print(f"calling shade {value}")
        if value < 10000:
            return True, 68, 0, 0, 255
        else:
            return True, 255, 255, 0, 255


class GeoPngTiler:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeoPngTiler_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GeoPNG Tiler')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.export_epsg = 3857

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeoPngTiler', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/geo_png_tiler/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Export rasters as GeoPNG format'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Convert Coords'),
            callback=self.convert,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&GeoPNG Tiler'),
                action)
            self.iface.removeToolBarIcon(action)

    def pngDbEncode(self, value, precision=1, min=0):
        value = value - min
        value = round(value * precision)

        if value < 0:
            print('Negative value')
            return QColor(0, 0, 0, 0)

        if value <= 255:
            return QColor(0, 0, value, 255)

        r = 0
        b = value % 256
        g = math.floor(value / 256)

        if g > 255:
            r = math.floor(g / 256)
            g = g % 256

        if r > 255:
            print(f'MAX VALUE VIOLATION: {value}')
            r = 255

        return QColor(r, g, b, 255)

    def setRenderer(self, steps, precision):
        # TEMP test using ramp - shows something at least
        items = []
        for v in range(0, steps):
            colour = self.pngDbEncode(v) #use integer here
            val = v / precision
            label = f"{val}"
            ramp_item = QgsColorRampShader.ColorRampItem(val, colour, label)
            items.append(ramp_item)

        raster_shader = QgsRasterShader()
        ramp_shader = QgsColorRampShader()
        ramp_shader.setColorRampType(
            1)  # https://qgis.org/pyqgis/3.2/core/Color/QgsColorRampShader.html#qgis.core.QgsColorRampShader.Quantile
        ramp_shader.setColorRampItemList(items)
        raster_shader.setRasterShaderFunction(ramp_shader)

        band = 1
        raster_layer = iface.activeLayer()
        renderer = QgsSingleBandPseudoColorRenderer(raster_layer.dataProvider(), band, raster_shader)
        raster_layer.setRenderer(renderer)
        raster_layer.triggerRepaint()

        print('Set renderer 2')
    #
    # def setRenderer(self):
    #     raster_shader = QgsRasterShader()
    #     shader = PngDbRasterShaderFunction(0, 1000)
    #     raster_shader.setRasterShaderFunction(shader)
    #     band = 1
    #     raster_layer = iface.activeLayer()
    #     renderer = QgsSingleBandPseudoColorRenderer(raster_layer.dataProvider(), band, raster_shader)
    #     raster_layer.setRenderer(renderer)
    #     raster_layer.triggerRepaint()
    #     print(f"ramp_shader shade {shader.shade(1)}")
    #     print(f"ramp_shader shade {shader.shade(1000)}")
    #     print(f"ramp_shader shade {shader.shade(10000)}")
    #     print(f"ramp_shader shade {shader.shade(100000)}")

    def savePng(self, box, name, path, size=1024):
        options = QgsMapSettings()
        # layers = QgsProject.instance().mapLayers().values()
        layers = [iface.activeLayer()]
        options.setDestinationCrs(QgsCoordinateReferenceSystem(self.export_epsg))
        options.setLayers(layers)
        options.setBackgroundColor(QColor(255, 255, 255))
        options.setOutputSize(QSize(size, size))
        options.setExtent(box)
        # options.setFlag(options.Antialiasing, True)

        render = QgsMapRendererSequentialJob(options)

        render.start()
        render.waitForFinished()
        img = render.renderedImage()
        img.save(path + "/" + name + ".png", "png")

    def drawTileGrid(self, tile_min, tile_max, z):
        canvas = iface.mapCanvas()
        epsg = canvas.mapSettings().destinationCrs().authid()
        crsSrc = QgsCoordinateReferenceSystem(epsg)
        crsDest = QgsCoordinateReferenceSystem(4326)  # WGS 84 / UTM zone 33N
        xform = QgsCoordinateTransform(crsSrc, crsDest, QgsProject.instance())

        for x in range(tile_min.x, tile_max.x):
            for y in range(tile_min.y, tile_max.y):
                p1 = ul(x, y, z)
                p2 = ul(x + 1, y + 1, z)

                t1 = xform.transform(QgsPointXY(p1.lng, p1.lat), QgsCoordinateTransform.ReverseTransform)
                t2 = xform.transform(QgsPointXY(p2.lng, p2.lat), QgsCoordinateTransform.ReverseTransform)

                print(f"polyline {t1} {t2}")

                polyline = QgsRubberBand(canvas)
                points = [QgsPoint(t1.x(), t1.y()), QgsPoint(t2.x(), t1.y()), QgsPoint(t2.x(), t2.y()), QgsPoint(t1.x(), t2.y())]
                polyline.setToGeometry(QgsGeometry.fromPolyline(points), None)
                polyline.setColor(QColor(255, 255, 0))
                polyline.setWidth(2)

    def get_xform(self, crsSrc, crsDest):
        return QgsCoordinateTransform(crsSrc, crsDest, QgsProject.instance())

    def convert(self):
        epsg = iface.mapCanvas().mapSettings().destinationCrs().authid()
        print("Current EPSG:", epsg)
        layer = iface.activeLayer()
        ex = layer.extent()

        xform = self.get_xform(layer.crs(), QgsCoordinateReferenceSystem(4326))
        xform_exp = self.get_xform(QgsCoordinateReferenceSystem(4326), QgsCoordinateReferenceSystem(self.export_epsg))

        # note that the projection can be skewed, so we need to look at all 4 corners
        tl = xform.transform(QgsPointXY(ex.xMinimum(), ex.yMaximum()))
        tr = xform.transform(QgsPointXY(ex.xMaximum(), ex.yMaximum()))
        bl = xform.transform(QgsPointXY(ex.xMinimum(), ex.yMinimum()))
        br = xform.transform(QgsPointXY(ex.xMaximum(), ex.yMinimum()))

        min_x = min(tl.x(), bl.x())
        max_x = max(tr.x(), br.x())
        min_y = min(bl.y(), br.y())
        max_y = max(tl.y(), tr.y())

        z = 11
        tile_min = tile(min_x, max_y, z) #note y flip
        tile_max = tile_plus(max_x, min_y, z)

        print(f"tile_min {tile_min}")
        print(f"tile_max {tile_max}")

        # self.drawTileGrid(tile_min, tile_max, z)

        use_reverse = False

        for x in range(tile_min.x, tile_max.x):
            for y in range(tile_min.y, tile_max.y):
                p1 = ul(x, y, z)
                p2 = ul(x+1, y-1, z)

                if use_reverse:
                    b1 = xform.transform(QgsPointXY(p1.lng, p1.lat), QgsCoordinateTransform.ReverseTransform)
                    b2 = xform.transform(QgsPointXY(p2.lng, p2.lat), QgsCoordinateTransform.ReverseTransform)

                    box = QgsRectangle(b1.x(), b1.y(), b2.x(), b2.y())
                    print(f"tile {x} {y} {z} ; box {box}")
                    # self.savePng(box, f"tile_{x}_{y}_{z}", "C:/Temp", 256)
                else:
                    print(f"p1 {p1}")
                    b1 = xform_exp.transform(QgsPointXY(p1.lng, p1.lat))
                    b2 = xform_exp.transform(QgsPointXY(p2.lng, p2.lat))

                    box = QgsRectangle(b1.x(), b1.y(), b2.x(), b2.y())

                    self.savePng(box, f"tile_{x}_{y}_{z}", "C:/Temp/tile-export", 256)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GeoPngTilerDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            steps = self.dlg.spnSteps.value()
            precision = self.dlg.spnPrecision.value()
            self.setRenderer(steps, precision)

            f = open("C:/Temp/tile-export/field.json", "w")
            f.write(json.dumps({'steps': steps, 'precision': precision}))
            f.close()
            # layer = iface.activeLayer()
            # ex = layer.extent()
            # print(f"Extents: {ex}")
            # print(f"CRS (from LL): {iface.mapCanvas().getCoordinateTransform().transform(61.4, 34.1)}")
            # self.savePng(ex, "example", "C:/Temp")
